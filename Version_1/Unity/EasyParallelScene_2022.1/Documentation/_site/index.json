{
  "api/EasyParallelScene/GUPS.EasyParallelScene.Behaviour.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Behaviour.html",
    "title": "Namespace GUPS.EasyParallelScene.Behaviour | GuardingPearSoftware documentation",
    "keywords": "Namespace GUPS.EasyParallelScene.Behaviour Classes ParallelSceneListener Attach this MonoBehaviour to your GameObject to listen and so react to Scene switching."
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Behaviour.ParallelSceneListener.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Behaviour.ParallelSceneListener.html",
    "title": "Class ParallelSceneListener | GuardingPearSoftware documentation",
    "keywords": "Class ParallelSceneListener Attach this MonoBehaviour to your GameObject to listen and so react to Scene switching. Inheritance System.Object ParallelSceneListener Namespace : GUPS.EasyParallelScene.Behaviour Assembly : cs.temp.dll.dll Syntax public class ParallelSceneListener : MonoBehaviour Methods Awake() Register to the SceneManager.activeSceneChanged event. Declaration public virtual void Awake() OnDestroy() Unregister from the SceneManager.activeSceneChanged event. Declaration public virtual void OnDestroy() OnSceneInFront() On Scene is now the active Scene and so in front. Declaration protected virtual void OnSceneInFront() OnSceneInParallel() On Scene is no longer the active Scene and now in the back in parallel. Declaration protected virtual void OnSceneInParallel()"
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Editor.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Editor.html",
    "title": "Namespace GUPS.EasyParallelScene.Editor | GuardingPearSoftware documentation",
    "keywords": "Namespace GUPS.EasyParallelScene.Editor Classes ParallelSceneEditor Custom editor for a ParallelScene. ParallelSceneManagerEditor Custom editor for a ParallelSceneManager."
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Editor.ParallelSceneEditor.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Editor.ParallelSceneEditor.html",
    "title": "Class ParallelSceneEditor | GuardingPearSoftware documentation",
    "keywords": "Class ParallelSceneEditor Custom editor for a ParallelScene. Inheritance System.Object ParallelSceneEditor Namespace : GUPS.EasyParallelScene.Editor Assembly : cs.temp.dll.dll Syntax public class ParallelSceneEditor : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Editor.ParallelSceneManagerEditor.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Editor.ParallelSceneManagerEditor.html",
    "title": "Class ParallelSceneManagerEditor | GuardingPearSoftware documentation",
    "keywords": "Class ParallelSceneManagerEditor Custom editor for a ParallelSceneManager. Inheritance System.Object ParallelSceneManagerEditor Namespace : GUPS.EasyParallelScene.Editor Assembly : cs.temp.dll.dll Syntax public class ParallelSceneManagerEditor : UnityEditor.Editor Methods OnInspectorGUI() Render the UI-Elements. Declaration public override void OnInspectorGUI()"
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Editor.Tests.ParallelScene.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Editor.Tests.ParallelScene.html",
    "title": "Namespace GUPS.EasyParallelScene.Editor.Tests.ParallelScene | GuardingPearSoftware documentation",
    "keywords": "Namespace GUPS.EasyParallelScene.Editor.Tests.ParallelScene Classes ParallelSceneTests Tests the ParallelScene class."
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Editor.Tests.ParallelScene.ParallelSceneTests.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Editor.Tests.ParallelScene.ParallelSceneTests.html",
    "title": "Class ParallelSceneTests | GuardingPearSoftware documentation",
    "keywords": "Class ParallelSceneTests Tests the ParallelScene class. Inheritance System.Object ParallelSceneTests Namespace : GUPS.EasyParallelScene.Editor.Tests.ParallelScene Assembly : cs.temp.dll.dll Syntax public class ParallelSceneTests Methods CreateAndDeleteParallelScene() This test creates and then deletes a ParallelScene object. Declaration public void CreateAndDeleteParallelScene()"
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.ELoadGameObjectFlag.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.ELoadGameObjectFlag.html",
    "title": "Enum ELoadGameObjectFlag | GuardingPearSoftware documentation",
    "keywords": "Enum ELoadGameObjectFlag Use these flags to control the ParallelScene GameObjects loading. Namespace : GUPS.EasyParallelScene Assembly : cs.temp.dll.dll Syntax [Flags] public enum ELoadGameObjectFlag : byte Fields Name Description APPLY_LAYER Load the GameObject/GameObjects and apply the ParallelScene Layer settings. Also apply the Layer to all Camera's culling and event mask and to all Light's and Reflection Probes culling mask. MERGE Load the GameObject/GameObjects and merge them to the active Scene. Combined with APPLY_LAYER, the active Scene's ParallelScene Layer settings will be applied to the loaded GameObjects. NONE Just load the GameObject/GameObjects."
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.ESwitchSceneFlag.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.ESwitchSceneFlag.html",
    "title": "Enum ESwitchSceneFlag | GuardingPearSoftware documentation",
    "keywords": "Enum ESwitchSceneFlag Use these flags to control the ParallelScene switching. Auto-Activate rendering and user interaction components. Namespace : GUPS.EasyParallelScene Assembly : cs.temp.dll.dll Syntax [Flags] public enum ESwitchSceneFlag : byte Fields Name Description ACTIVATE_AUDIOSOURCE Switch to the ParallelScene and unmute the AudioSources. ACTIVATE_MAIN_AUDIOLISTENER Switch to the ParallelScene and activate the Main AudioListener. ACTIVATE_MAIN_CAMERA Switch to the ParallelScene and activate the Main Camera. ACTIVATE_MAIN_EVENTSYSTEM Switch to the ParallelScene and activate the Main EventSystem. DEFAULT Switch to the ParallelScene and activate the Main Camera, AudioListener, EventSystem and AudioSources. NONE Just switch to the ParallelScene."
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Extension.ComponentExtension.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Extension.ComponentExtension.html",
    "title": "Class ComponentExtension | GuardingPearSoftware documentation",
    "keywords": "Class ComponentExtension Extension methods for Unity Components, allowing faster interaction with ParallelScenes. Inheritance System.Object ComponentExtension Namespace : GUPS.EasyParallelScene.Extension Assembly : cs.temp.dll.dll Syntax public static class ComponentExtension Methods GetSceneDeltaTime(Component) Returns the DeltaTime for the Scene the _Component is in. Declaration public static float GetSceneDeltaTime(this Component _Component) Parameters Type Name Description Component _Component Pass a Component to get its parallel delta time based on the Scene it is in. Returns Type Description System.Single GetSceneLayer(Component) Returns the Layer of the ParallelScene the _Component is in. Mostly used to identify GameObjects in different ParallelScenes. Declaration public static int GetSceneLayer(this Component _Component) Parameters Type Name Description Component _Component Returns Type Description System.Int32 GetSceneLayerMask(Component) Returns the Layer Mask of the ParallelScene the _Component is in. Mostly used to cast Physics.Raycast in different ParallelScenes. Declaration public static int GetSceneLayerMask(this Component _Component) Parameters Type Name Description Component _Component Returns Type Description System.Int32 IsSceneActive(Component) Returns if the Scene of _Component is active (in front). Declaration public static bool IsSceneActive(this Component _Component) Parameters Type Name Description Component _Component Pass a Component to check if the scene it is in is active. Returns Type Description System.Boolean"
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Extension.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Extension.html",
    "title": "Namespace GUPS.EasyParallelScene.Extension | GuardingPearSoftware documentation",
    "keywords": "Namespace GUPS.EasyParallelScene.Extension Classes ComponentExtension Extension methods for Unity Components, allowing faster interaction with ParallelScenes. SceneExtension Extension methods for Unity Scenes, allowing faster interaction with ParallelScenes."
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Extension.SceneExtension.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Extension.SceneExtension.html",
    "title": "Class SceneExtension | GuardingPearSoftware documentation",
    "keywords": "Class SceneExtension Extension methods for Unity Scenes, allowing faster interaction with ParallelScenes. Inheritance System.Object SceneExtension Namespace : GUPS.EasyParallelScene.Extension Assembly : cs.temp.dll.dll Syntax public static class SceneExtension Methods GetDeltaTime(Scene) Returns the DeltaTime for a ParallelScene of _Scene. The DeltaTime is the interval in seconds from the last frame to the current one. If the ParallelScene is paused, the DeltaTime is 0.0f. Declaration public static float GetDeltaTime(this Scene _Scene) Parameters Type Name Description Scene _Scene Pass a Scene to get its parallel DeltaTime. Returns Type Description System.Single GetIsPaused(Scene) Returns if the Scene is paused. Declaration public static bool GetIsPaused(this Scene _Scene) Parameters Type Name Description Scene _Scene Pass a Scene you want to know if it is paused. Returns Type Description System.Boolean If the Scene is paused. GetLayer(Scene) Returns the layer of the ParallelScene of _Scene. Mostly used to identify GameObjects in different ParallelScenes. Declaration public static int GetLayer(this Scene _Scene) Parameters Type Name Description Scene _Scene Get the layer for the passed Scene. Returns Type Description System.Int32 GetLayerMask(Scene) Returns the Layer Mask of the ParallelScene of _Scene. Mostly used to cast Physics.Raycast in different ParallelScenes. Declaration public static int GetLayerMask(this Scene _Scene) Parameters Type Name Description Scene _Scene Get the layer name for the passed Scene. Returns Type Description System.Int32 GetParallelScene(Scene) Returns the registered ParallelScene for a _Scene. If there is no ParallelScene registered, will return null. Declaration public static ParallelScene GetParallelScene(this Scene _Scene) Parameters Type Name Description Scene _Scene Scene to check. Returns Type Description ParallelScene GetTimeScale(Scene) Returns the current TimeScale for a ParallelScene of _Scene. Declaration public static float GetTimeScale(this Scene _Scene) Parameters Type Name Description Scene _Scene Pass a Scene to get its parallel TimeScale. Returns Type Description System.Single IsActive(Scene) Returns if the _Scene is active (in front). Declaration public static bool IsActive(this Scene _Scene) Parameters Type Name Description Scene _Scene Scene to check. Returns Type Description System.Boolean"
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Helper.AudioListenerHelper.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Helper.AudioListenerHelper.html",
    "title": "Class AudioListenerHelper | GuardingPearSoftware documentation",
    "keywords": "Class AudioListenerHelper Helper class for Unity AudioListener. Inheritance System.Object AudioListenerHelper Namespace : GUPS.EasyParallelScene.Helper Assembly : cs.temp.dll.dll Syntax public static class AudioListenerHelper Methods GetAllAudioListeners() Returns all AudioListener in all loaded Scenes. Declaration public static List<AudioListener> GetAllAudioListeners() Returns Type Description List < AudioListener > A list of AudioListener in the loaded Scenes. GetAllAudioListeners(Scene) Returns all AudioListeners in the given Scene. Declaration public static List<AudioListener> GetAllAudioListeners(Scene _Scene) Parameters Type Name Description Scene _Scene Returns Type Description List < AudioListener > A list of AudioListeners in the passed _Scene. GetMainAudioListener(Scene) Returns the main AudioListener (Tag equals 'MainCamera') in the given Scene. Declaration public static AudioListener GetMainAudioListener(Scene _Scene) Parameters Type Name Description Scene _Scene Returns Type Description AudioListener The main AudioListener in the passed _Scene."
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Helper.AudioSourceHelper.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Helper.AudioSourceHelper.html",
    "title": "Class AudioSourceHelper | GuardingPearSoftware documentation",
    "keywords": "Class AudioSourceHelper Helper class for Unity EventSystems. Inheritance System.Object AudioSourceHelper Namespace : GUPS.EasyParallelScene.Helper Assembly : cs.temp.dll.dll Syntax public static class AudioSourceHelper Methods GetAllAudioSources() Returns all AudioSources in all loaded Scenes. Declaration public static List<AudioSource> GetAllAudioSources() Returns Type Description List < AudioSource > A list of AudioSources in the loaded Scenes. GetAllAudioSources(Scene) Returns all AudioSources in the given Scene. Declaration public static List<AudioSource> GetAllAudioSources(Scene _Scene) Parameters Type Name Description Scene _Scene Returns Type Description List < AudioSource > A list of AudioSources in the passed _Scene."
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Helper.CameraHelper.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Helper.CameraHelper.html",
    "title": "Class CameraHelper | GuardingPearSoftware documentation",
    "keywords": "Class CameraHelper Helper class for Unity Cameras. Inheritance System.Object CameraHelper Namespace : GUPS.EasyParallelScene.Helper Assembly : cs.temp.dll.dll Syntax public static class CameraHelper Methods GetAllCameras() Returns all Cameras in all loaded Scenes. Declaration public static List<Camera> GetAllCameras() Returns Type Description List < Camera > A list of Cameras in the loaded Scenes. GetAllCameras(Scene) Returns all Cameras in the given Scene. Declaration public static List<Camera> GetAllCameras(Scene _Scene) Parameters Type Name Description Scene _Scene Returns Type Description List < Camera > A list of Cameras in the passed _Scene. GetMainCamera(Scene) Returns the main Camera (Tag equals 'MainCamera') in the given Scene. Declaration public static Camera GetMainCamera(Scene _Scene) Parameters Type Name Description Scene _Scene Returns Type Description Camera The main Camera in the passed _Scene."
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Helper.EventSystemHelper.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Helper.EventSystemHelper.html",
    "title": "Class EventSystemHelper | GuardingPearSoftware documentation",
    "keywords": "Class EventSystemHelper Helper class for Unity EventSystems. Inheritance System.Object EventSystemHelper Namespace : GUPS.EasyParallelScene.Helper Assembly : cs.temp.dll.dll Syntax public static class EventSystemHelper Methods GetAllEventSystems() Returns all EventSystems in all loaded Scenes. Declaration public static List<EventSystem> GetAllEventSystems() Returns Type Description List < EventSystem > A list of EventSystems in the loaded Scenes. GetAllEventSystems(Scene) Returns all EventSystems in the given Scene. Declaration public static List<EventSystem> GetAllEventSystems(Scene _Scene) Parameters Type Name Description Scene _Scene Returns Type Description List < EventSystem > A list of EventSystems in the passed _Scene."
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Helper.GameObjectHelper.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Helper.GameObjectHelper.html",
    "title": "Class GameObjectHelper | GuardingPearSoftware documentation",
    "keywords": "Class GameObjectHelper Helper class for Unity GameObjects. Inheritance System.Object GameObjectHelper Namespace : GUPS.EasyParallelScene.Helper Assembly : cs.temp.dll.dll Syntax public static class GameObjectHelper Methods FindGameObjectsWithLayer(Scene) Returns all active GameObjects inside the ParallelScene _Scene. Returns null if no GameObject was found. If the passed _Scene is not registered, Unitys default 'Scene.GetRootGameObjects' will be used. Declaration public static GameObject[] FindGameObjectsWithLayer(Scene _Scene) Parameters Type Name Description Scene _Scene The Scene to search GameObjects are in. Returns Type Description GameObject [] FindGameObjectsWithLayer(Int32) Returns an array of active GameObjects with _Layer. Declaration public static GameObject[] FindGameObjectsWithLayer(int _Layer) Parameters Type Name Description System.Int32 _Layer The exact layer to search GameObjects for. Returns Type Description GameObject [] FindGameObjectsWithTagAndLayer(String, Int32) Returns an array of active GameObjects tagged _Tag and in ParallelScene with _Layer. Returns empty array if no GameObject was found. Declaration public static GameObject[] FindGameObjectsWithTagAndLayer(string _Tag, int _Layer) Parameters Type Name Description System.String _Tag The name of the tag to search GameObjects for. System.Int32 _Layer The exact layer to search GameObjects for. Returns Type Description GameObject [] FindGameObjectWithTagAndLayer(String, Scene) Declaration public static GameObject FindGameObjectWithTagAndLayer(string _Tag, Scene _Scene) Parameters Type Name Description System.String _Tag Scene _Scene Returns Type Description GameObject FindGameObjectWithTagAndLayer(String, Int32) Returns an active GameObject tagged _Tag and in ParallelScene with _Layer. Returns empty array if no GameObject was found. Declaration public static GameObject FindGameObjectWithTagAndLayer(string _Tag, int _Layer) Parameters Type Name Description System.String _Tag The name of the tag to search GameObjects for. System.Int32 _Layer The exact layer to search GameObjects for. Returns Type Description GameObject GameObjectsAreInSameScene(GameObject, GameObject) Returns true, if both GameObjects are in the same Scene. Declaration public static bool GameObjectsAreInSameScene(GameObject _GameObject1, GameObject _GameObject2) Parameters Type Name Description GameObject _GameObject1 GameObject _GameObject2 Returns Type Description System.Boolean GameObjectsAreInSameScene(GameObject[]) Returns true, if all the passed _GameObjects are in the same Scene. Declaration public static bool GameObjectsAreInSameScene(GameObject[] _GameObjects) Parameters Type Name Description GameObject [] _GameObjects Returns Type Description System.Boolean"
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Helper.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Helper.html",
    "title": "Namespace GUPS.EasyParallelScene.Helper | GuardingPearSoftware documentation",
    "keywords": "Namespace GUPS.EasyParallelScene.Helper Classes AudioListenerHelper Helper class for Unity AudioListener. AudioSourceHelper Helper class for Unity EventSystems. CameraHelper Helper class for Unity Cameras. EventSystemHelper Helper class for Unity EventSystems. GameObjectHelper Helper class for Unity GameObjects. LightHelper Helper class for Unity Lights."
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Helper.LightHelper.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Helper.LightHelper.html",
    "title": "Class LightHelper | GuardingPearSoftware documentation",
    "keywords": "Class LightHelper Helper class for Unity Lights. Inheritance System.Object LightHelper Namespace : GUPS.EasyParallelScene.Helper Assembly : cs.temp.dll.dll Syntax public static class LightHelper Methods GetAllLights() Returns all Lights in all loaded Scenes. Declaration public static List<Light> GetAllLights() Returns Type Description List < Light > A list of Lights in the loaded Scenes. GetAllLights(Scene) Returns all Lights in the given Scene. Declaration public static List<Light> GetAllLights(Scene _Scene) Parameters Type Name Description Scene _Scene Returns Type Description List < Light > A list of Lights in the passed _Scene. GetAllReflectionProbes() Returns all ReflectionProbes in all loaded Scenes. Declaration public static List<ReflectionProbe> GetAllReflectionProbes() Returns Type Description List < ReflectionProbe > A list of ReflectionProbes in the loaded Scenes. GetAllReflectionProbes(Scene) Returns all ReflectionProbes in the given Scene. Declaration public static List<ReflectionProbe> GetAllReflectionProbes(Scene _Scene) Parameters Type Name Description Scene _Scene Returns Type Description List < ReflectionProbe > A list of ReflectionProbes in the passed _Scene."
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.html",
    "title": "Namespace GUPS.EasyParallelScene | GuardingPearSoftware documentation",
    "keywords": "Namespace GUPS.EasyParallelScene Classes ParallelScene A ParallelScene wraps around a Unity Scene and makes it parallelizable. This allows unique rendering, collision and light. To create a ParallelScene, just right click anywhere in your project view and click Create->GUPS->EasyParallelScene->ParallelScene. Assign to this ParallelScene a Scene and apply your custom settings. ParallelSceneManager The ParallelSceneManager allows to load and run Scenes in parallel. This means, you can have multiple Scenes running independent from each other, while it is possible to switch between these Scenes. To do so, the Scene has to be registered as ParallelScene. Each ParallelScene can have its own settings, for example a custom time scale, applied only to the linked Scene. Also it is possible to instantiate GameObject in those Scenes. Enums ELoadGameObjectFlag Use these flags to control the ParallelScene GameObjects loading. ESwitchSceneFlag Use these flags to control the ParallelScene switching. Auto-Activate rendering and user interaction components."
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.ParallelScene.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.ParallelScene.html",
    "title": "Class ParallelScene | GuardingPearSoftware documentation",
    "keywords": "Class ParallelScene A ParallelScene wraps around a Unity Scene and makes it parallelizable. This allows unique rendering, collision and light. To create a ParallelScene, just right click anywhere in your project view and click Create->GUPS->EasyParallelScene->ParallelScene. Assign to this ParallelScene a Scene and apply your custom settings. Inheritance System.Object ParallelScene Namespace : GUPS.EasyParallelScene Assembly : cs.temp.dll.dll Syntax public class ParallelScene : ScriptableObject Properties Layer The layer the Scene uses. Used for rendering, collision and light. Allowed: 0 to 31 from Unity layer. Declaration public int Layer { get; } Property Value Type Description System.Int32 ScenePath The relative path of a Unity Scene. Allowed: A relative Unity Scene path, like 'Assets/.../MyScene.unity'. Declaration public string ScenePath { get; } Property Value Type Description System.String TimeScale Returns the custom time scale for the Scene, if \"UseCustomTimeScale\" is true. Else returns the Unity Time.TimeScale. Declaration public float TimeScale { get; } Property Value Type Description System.Single UseCustomTimeScale Use a custom time scale for this Scene. Declaration public bool UseCustomTimeScale { get; } Property Value Type Description System.Boolean Methods GetHashCode() Calculates a hash based on the class fields. The hash is useful for multiplayer to ensure the ParallelScene settings are all the same. Declaration public override int GetHashCode() Returns Type Description System.Int32 ToString() Represents the ParallelScene as string. Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.ParallelSceneManager.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.ParallelSceneManager.html",
    "title": "Class ParallelSceneManager | GuardingPearSoftware documentation",
    "keywords": "Class ParallelSceneManager The ParallelSceneManager allows to load and run Scenes in parallel. This means, you can have multiple Scenes running independent from each other, while it is possible to switch between these Scenes. To do so, the Scene has to be registered as ParallelScene. Each ParallelScene can have its own settings, for example a custom time scale, applied only to the linked Scene. Also it is possible to instantiate GameObject in those Scenes. Inheritance System.Object PersistentSingleton < ParallelSceneManager > ParallelSceneManager Inherited Members PersistentSingleton<ParallelSceneManager>.Singleton PersistentSingleton<ParallelSceneManager>.Exists PersistentSingleton<ParallelSceneManager>.Awake() Namespace : GUPS.EasyParallelScene Assembly : cs.temp.dll.dll Syntax public class ParallelSceneManager : PersistentSingleton<ParallelSceneManager> Methods ContainsParallelScene(ParallelScene) Returns true, if a _ParallelScene is registered. Declaration public bool ContainsParallelScene(ParallelScene _ParallelScene) Parameters Type Name Description ParallelScene _ParallelScene The ParallelScene to check. Returns Type Description System.Boolean Returns if the ParallelScene is registered. ContainsParallelScene(Scene) Returns true, if a ParallelScene for _Scene is registered. Declaration public bool ContainsParallelScene(Scene _Scene) Parameters Type Name Description Scene _Scene The Scene to check. Returns Type Description System.Boolean Returns if the ParallelScene is registered. ContainsParallelScene(String) Returns true, if a ParallelScene with _ScenePath is registered. Declaration public bool ContainsParallelScene(string _ScenePath) Parameters Type Name Description System.String _ScenePath Pass a relative scene path 'Assets/[...]/MyUnityScene.unity' or just the scene name 'MyUnityScene'. Returns Type Description System.Boolean Returns if the ParallelScene is registered. FindParallelScene(Scene) Returns a registered ParallelScene with _Scene. If there is no ParallelScene returns null. Declaration public ParallelScene FindParallelScene(Scene _Scene) Parameters Type Name Description Scene _Scene Pass a Scene. Returns Type Description ParallelScene Returns a registered ParallelScene. If there is none, returns null. FindParallelScene(String) Returns a registered ParallelScene with _ScenePath. If there is no ParallelScene returns null. Declaration public ParallelScene FindParallelScene(string _ScenePath) Parameters Type Name Description System.String _ScenePath Pass a relative scene path 'Assets/[...]/MyUnityScene.unity' or just the scene name 'MyUnityScene'. Returns Type Description ParallelScene Returns a registered ParallelScene. If there is none, returns null. GetDeltaTime(ParallelScene) Returns the deltaTime for a _ParallelScene. The deltaTime is the interval in seconds from the last frame to the current one. If the _ParallelScene is paused, the deltaTime is 0.0f. Declaration public float GetDeltaTime(ParallelScene _ParallelScene) Parameters Type Name Description ParallelScene _ParallelScene Pass a ParallelScene you want the deltaTime for. Returns Type Description System.Single Exceptions Type Condition System.ArgumentNullException GetDeltaTime(Scene) Returns the deltaTime for a _ParallelScene. The deltaTime is the interval in seconds from the last frame to the current one. If the _ParallelScene is paused, the deltaTime is 0.0f. Declaration public float GetDeltaTime(Scene _Scene) Parameters Type Name Description Scene _Scene Pass a Scene you want the deltaTime for. Returns Type Description System.Single GetDeltaTime(String) Returns the deltaTime for a ParallelScene with _ScenePath. The deltaTime is the interval in seconds from the last frame to the current one. If the ParallelScene is paused, the deltaTime is 0.0f. Declaration public float GetDeltaTime(string _ScenePath) Parameters Type Name Description System.String _ScenePath Pass a relative scene path 'Assets/[...]/MyUnityScene.unity' or just the scene name 'MyUnityScene' you want the deltaTime for. Returns Type Description System.Single GetIsPaused(ParallelScene) Returns if the ParallelScene is paused. Declaration public bool GetIsPaused(ParallelScene _ParallelScene) Parameters Type Name Description ParallelScene _ParallelScene Pass a ParallelScene you want to know if it is paused. Returns Type Description System.Boolean If the Scene is paused. Exceptions Type Condition System.ArgumentNullException GetIsPaused(Scene) Returns if the ParallelScene is paused. Declaration public bool GetIsPaused(Scene _Scene) Parameters Type Name Description Scene _Scene Returns Type Description System.Boolean If the Scene is paused. GetIsPaused(String) Returns if the ParallelScene is paused. Declaration public bool GetIsPaused(string _ScenePath) Parameters Type Name Description System.String _ScenePath Pass a relative scene path 'Assets/[...]/MyUnityScene.unity' or just the scene name 'MyUnityScene' you want to know if it is paused. Returns Type Description System.Boolean If the Scene is paused. GetLayer(ParallelScene) Returns the layer of the _ParallelScene. Declaration public int GetLayer(ParallelScene _ParallelScene) Parameters Type Name Description ParallelScene _ParallelScene Get the layer for the passed ParallelScene. Returns Type Description System.Int32 GetLayer(Scene) Returns the layer of the ParallelScene of _Scene. If the _Scene is not registered as ParallelScene, returns the Default Layer (0). Declaration public int GetLayer(Scene _Scene) Parameters Type Name Description Scene _Scene Get the layer for the passed Scene. Returns Type Description System.Int32 GetLayer(String) Returns the layer of the ParallelScene of the Scene at _ScenePath. If the Scene at _ScenePath is not registered as ParallelScene, returns the Default Layer (0). Declaration public int GetLayer(string _ScenePath) Parameters Type Name Description System.String _ScenePath Get the layer for the Scene at passed path. Returns Type Description System.Int32 GetTimeScale(ParallelScene) Returns the current TimeScale for a _ParallelScene. Declaration public float GetTimeScale(ParallelScene _ParallelScene) Parameters Type Name Description ParallelScene _ParallelScene Pass a ParallelScene you want to get the TimeScale for. Returns Type Description System.Single TimeScale in float for this Scene. Exceptions Type Condition System.ArgumentNullException GetTimeScale(Scene) Returns the current TimeScale for a ParallelScene with _Scene. Declaration public float GetTimeScale(Scene _Scene) Parameters Type Name Description Scene _Scene Pass as Scene you want to get the TimeScale for. Returns Type Description System.Single TimeScale in float for this Scene. GetTimeScale(String) Returns the current TimeScale for a ParallelScene with _ScenePath. Declaration public float GetTimeScale(string _ScenePath) Parameters Type Name Description System.String _ScenePath Pass a relative scene path 'Assets/[...]/MyUnityScene.unity' or just the scene name 'MyUnityScene' you want to get the TimeScale for. Returns Type Description System.Single TimeScale in float for this Scene. Instantiate(GameObject, ParallelScene) Clones the GameObject _Original and returns the clone. When you clone a GameObject or Component, all child objects and components are also cloned with their properties set like those of the original object. This cloned GameObject will then be moved to the _ParallelScene. Declaration public GameObject Instantiate(GameObject _Original, ParallelScene _ParallelScene) Parameters Type Name Description GameObject _Original GameObject to clone. ParallelScene _ParallelScene Move cloned object to. Returns Type Description GameObject Instantiate(GameObject, Vector3, Quaternion, ParallelScene) Clones the GameObject _Original and returns the clone. When you clone a GameObject or Component, all child objects and components are also cloned with their properties set like those of the original object. This cloned GameObject will then be moved to the _ParallelScene. Declaration public GameObject Instantiate(GameObject _Original, Vector3 _Position, Quaternion _Rotation, ParallelScene _ParallelScene) Parameters Type Name Description GameObject _Original GameObject to clone. Vector3 _Position Position for the cloned GameObject. Quaternion _Rotation Rotation for the cloned GameObject. ParallelScene _ParallelScene Move cloned object to. Returns Type Description GameObject IsLoaded(ParallelScene) Returns true, if the _ParallelScene is already loaded. Declaration public bool IsLoaded(ParallelScene _ParallelScene) Parameters Type Name Description ParallelScene _ParallelScene Returns Type Description System.Boolean IsLoaded(Scene) Returns true, if the _Scene is already loaded. Declaration public bool IsLoaded(Scene _Scene) Parameters Type Name Description Scene _Scene Returns Type Description System.Boolean IsLoaded(String) Returns true, if the Scene at _ScenePath is already loaded. Declaration public bool IsLoaded(string _ScenePath) Parameters Type Name Description System.String _ScenePath Returns Type Description System.Boolean IsSceneActive(ParallelScene) Returns if the _ParallelScene is active (in front). Declaration public bool IsSceneActive(ParallelScene _ParallelScene) Parameters Type Name Description ParallelScene _ParallelScene ParallelScene to check. Returns Type Description System.Boolean IsSceneActive(Scene) Returns if the _Scene is active (in front). Declaration public bool IsSceneActive(Scene _Scene) Parameters Type Name Description Scene _Scene Scene to check. Returns Type Description System.Boolean IsSceneActive(String) Returns if the Scene at _ScenePath is active (in front). Declaration public bool IsSceneActive(string _ScenePath) Parameters Type Name Description System.String _ScenePath Scene at path to check. Returns Type Description System.Boolean Load(ParallelScene, LoadSceneMode, ELoadGameObjectFlag) Load a _ParallelScene either Single or Additive (Parallel) to the current Scenes. Note that this function behaves the same as SceneManager.LoadSceneAsync meaning that the load does not happen immediately. This behavior also means that the Scene that is returned has its state set to Loading. Declaration public AsyncOperation Load(ParallelScene _ParallelScene, LoadSceneMode _LoadSceneMode, ELoadGameObjectFlag _LoadGameObjectsFlags) Parameters Type Name Description ParallelScene _ParallelScene The Scene to load. LoadSceneMode _LoadSceneMode The loading mode. Either Single or Additive (Parallel). ELoadGameObjectFlag _LoadGameObjectsFlags Decide how to load the GameObjects in the loading Scene. Returns Type Description AsyncOperation Returns the loading Scene async operation. Exceptions Type Condition System.ArgumentNullException System.Exception MoveGameObjectToScene(GameObject, ParallelScene) Move the _GameObject to the _ParallelScene and applying the _ParallelScene Layer to _GameObject and Children. Declaration public void MoveGameObjectToScene(GameObject _GameObject, ParallelScene _ParallelScene) Parameters Type Name Description GameObject _GameObject GameObject to move. ParallelScene _ParallelScene Target scene. Exceptions Type Condition System.ArgumentNullException MoveGameObjectToScene(GameObject, Scene) Move the _GameObject to the ParallelScene _Scene and applying the ParallelScene Layer to _GameObject and Children. Declaration public void MoveGameObjectToScene(GameObject _GameObject, Scene _Scene) Parameters Type Name Description GameObject _GameObject GameObject to move. Scene _Scene Target scene. Exceptions Type Condition System.ArgumentNullException MoveGameObjectToScene(GameObject, String) Move the _GameObject to the ParallelScene at _ScenePath and applying the ParallelScene Layer to _GameObject and Children. Declaration public void MoveGameObjectToScene(GameObject _GameObject, string _ScenePath) Parameters Type Name Description GameObject _GameObject GameObject to move. System.String _ScenePath Target scene. Exceptions Type Condition System.ArgumentNullException RegisterParallelScene(ParallelScene) Register a ParallelScene while runtime, to make it available in GameMode. Declaration public void RegisterParallelScene(ParallelScene _ParallelScene) Parameters Type Name Description ParallelScene _ParallelScene Pass a ParallelScene you want to register and make it available in game. SetIsPaused(ParallelScene, Boolean) Pause or unpause a _ParallelScene. Declaration public void SetIsPaused(ParallelScene _ParallelScene, bool _IsPaused) Parameters Type Name Description ParallelScene _ParallelScene Pass a ParallelScene you want to pause or unpause. System.Boolean _IsPaused True for pausing. Exceptions Type Condition System.ArgumentNullException SetIsPaused(Scene, Boolean) Pause or unpause a ParallelScene with _Scene. Declaration public void SetIsPaused(Scene _Scene, bool _IsPaused) Parameters Type Name Description Scene _Scene Pass a Scene you want to pause or unpause. System.Boolean _IsPaused True for pausing. SetIsPaused(String, Boolean) Pause or unpause a ParallelScene with _ScenePath. Declaration public void SetIsPaused(string _ScenePath, bool _IsPaused) Parameters Type Name Description System.String _ScenePath Pass a relative scene path 'Assets/[...]/MyUnityScene.unity' or just the scene name 'MyUnityScene' you want to pause or unpause. System.Boolean _IsPaused True for pausing. SetTimeScale(ParallelScene, Single) Set the _TimeScale for a _ParallelScene. Declaration public void SetTimeScale(ParallelScene _ParallelScene, float _TimeScale) Parameters Type Name Description ParallelScene _ParallelScene Pass a ParallelScene you want to set the TimeScale. System.Single _TimeScale The TimeScale for the ParallelScene. Exceptions Type Condition System.ArgumentNullException SetTimeScale(Scene, Single) Set the _TimeScale for a ParallelScene with _Scene. Declaration public void SetTimeScale(Scene _Scene, float _TimeScale) Parameters Type Name Description Scene _Scene Pass a Scene you want to set the TimeScale for. System.Single _TimeScale The TimeScale for the ParallelScene. SetTimeScale(String, Single) Set the _TimeScale for a ParallelScene with _ScenePath. Declaration public void SetTimeScale(string _ScenePath, float _TimeScale) Parameters Type Name Description System.String _ScenePath Pass a relative scene path 'Assets/[...]/MyUnityScene.unity' or just the scene name 'MyUnityScene' you want to set the TimeScale for. System.Single _TimeScale The TimeScale for the ParallelScene. SwitchTo(ParallelScene, ESwitchSceneFlag, Boolean) Switch to a loaded ParallelScene and set it as active Scene. If the scene is not loaded yet, returns false. Declaration public bool SwitchTo(ParallelScene _ParallelScene, ESwitchSceneFlag _SwitchSceneFlag, bool _PauseCurrentScene) Parameters Type Name Description ParallelScene _ParallelScene Pass a ParallelScene to switch to. ESwitchSceneFlag _SwitchSceneFlag Manage the Scene switching. System.Boolean _PauseCurrentScene Pause the active scene. Returns Type Description System.Boolean Returns if the switching was successful. SwitchTo(String, ESwitchSceneFlag, Boolean) Switch to a loaded ParallelScene and set it as active Scene. If the scene is not loaded yet, returns false. Declaration public bool SwitchTo(string _ScenePath, ESwitchSceneFlag _SwitchSceneFlag, bool _PauseCurrentScene) Parameters Type Name Description System.String _ScenePath Pass a relative Scene path like 'Assets/[...]/MyUnityScene.unity' or just the scene name 'MyUnityScene' to switch to. ESwitchSceneFlag _SwitchSceneFlag Manage the Scene switching. System.Boolean _PauseCurrentScene Pause the active scene. Returns Type Description System.Boolean Returns if the switching was successful. Exceptions Type Condition System.Exception Unload(ParallelScene) Unload the Scene using the default Unity SceneManager unload methods. Declaration public AsyncOperation Unload(ParallelScene _ParallelScene) Parameters Type Name Description ParallelScene _ParallelScene The scene to unload. Returns Type Description AsyncOperation Returns the unloading scene async operation. Exceptions Type Condition System.ArgumentNullException"
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Singleton.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Singleton.html",
    "title": "Namespace GUPS.EasyParallelScene.Singleton | GuardingPearSoftware documentation",
    "keywords": "Namespace GUPS.EasyParallelScene.Singleton Classes PersistentSingleton<T> A thread safe singleton active in the whole application."
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Singleton.PersistentSingleton-1.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Singleton.PersistentSingleton-1.html",
    "title": "Class PersistentSingleton<T> | GuardingPearSoftware documentation",
    "keywords": "Class PersistentSingleton<T> A thread safe singleton active in the whole application. Inheritance System.Object PersistentSingleton<T> ParallelSceneManager Namespace : GUPS.EasyParallelScene.Singleton Assembly : cs.temp.dll.dll Syntax public class PersistentSingleton<T> : MonoBehaviour where T : MonoBehaviour Type Parameters Name Description T Properties Exists Returns if a singleton exists. Declaration public static bool Exists { get; } Property Value Type Description System.Boolean Singleton Returns an active singleton of this instance or creates a new one. Declaration public static T Singleton { get; } Property Value Type Description T Methods Awake() On awake, check if there is already a singleton. If there is one and it is not this, delete the gameobject. Declaration protected virtual void Awake()"
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Tests.ParallelSceneManager.CreateTests.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Tests.ParallelSceneManager.CreateTests.html",
    "title": "Class CreateTests | GuardingPearSoftware documentation",
    "keywords": "Class CreateTests Tests for the ParallelSceneManager class. Inheritance System.Object CreateTests Namespace : GUPS.EasyParallelScene.Tests.ParallelSceneManager Assembly : cs.temp.dll.dll Syntax public class CreateTests Methods CleanUp() Clean up after each test. Declaration public void CleanUp() Init() Setup before each test. Declaration public void Init() ValidateCreation() Validate if the ParallelSceneManager got created. Declaration public void ValidateCreation()"
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Tests.ParallelSceneManager.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Tests.ParallelSceneManager.html",
    "title": "Namespace GUPS.EasyParallelScene.Tests.ParallelSceneManager | GuardingPearSoftware documentation",
    "keywords": "Namespace GUPS.EasyParallelScene.Tests.ParallelSceneManager Classes CreateTests Tests for the ParallelSceneManager class. LoadTests Tests for the ParallelSceneManager class. RegisterTests Tests for the ParallelSceneManager class. SwitchTests Tests for the ParallelSceneManager class. TimeTests Tests for the ParallelSceneManager class."
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Tests.ParallelSceneManager.LoadTests.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Tests.ParallelSceneManager.LoadTests.html",
    "title": "Class LoadTests | GuardingPearSoftware documentation",
    "keywords": "Class LoadTests Tests for the ParallelSceneManager class. Inheritance System.Object LoadTests Namespace : GUPS.EasyParallelScene.Tests.ParallelSceneManager Assembly : cs.temp.dll.dll Syntax public class LoadTests Methods CleanUp() Clean up after each test. Declaration public void CleanUp() Init() Setup before each test. Declaration public void Init() LoadAndApplyLayer() Validate if the ParallelScene got loaded with applying the layer. Declaration public IEnumerator LoadAndApplyLayer() Returns Type Description IEnumerator LoadAndMerge() Validate if the ParallelScene got loaded and merged without applying the layer. Declaration public IEnumerator LoadAndMerge() Returns Type Description IEnumerator LoadAndMergeAndApplyLayer() Validate if the ParallelScene got loaded with applying the layer. Declaration public IEnumerator LoadAndMergeAndApplyLayer() Returns Type Description IEnumerator LoadAndNotApplyLayer() Validate if the ParallelScene got loaded without applying the layer. Declaration public IEnumerator LoadAndNotApplyLayer() Returns Type Description IEnumerator LoadSingleAndApplyLayer() Validate if the ParallelScene got loaded with applying the layer. Declaration public IEnumerator LoadSingleAndApplyLayer() Returns Type Description IEnumerator LoadSingleAndNotApplyLayer() Validate if the ParallelScene got loaded without applying the layer. Declaration public IEnumerator LoadSingleAndNotApplyLayer() Returns Type Description IEnumerator"
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Tests.ParallelSceneManager.RegisterTests.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Tests.ParallelSceneManager.RegisterTests.html",
    "title": "Class RegisterTests | GuardingPearSoftware documentation",
    "keywords": "Class RegisterTests Tests for the ParallelSceneManager class. Inheritance System.Object RegisterTests Namespace : GUPS.EasyParallelScene.Tests.ParallelSceneManager Assembly : cs.temp.dll.dll Syntax public class RegisterTests Methods CleanUp() Clean up after each test. Declaration public void CleanUp() Init() Setup before each test. Declaration public void Init() RegisterAndContains() Validate if the ParallelScene was successfully registered. Declaration public void RegisterAndContains()"
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Tests.ParallelSceneManager.SwitchTests.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Tests.ParallelSceneManager.SwitchTests.html",
    "title": "Class SwitchTests | GuardingPearSoftware documentation",
    "keywords": "Class SwitchTests Tests for the ParallelSceneManager class. Inheritance System.Object SwitchTests Namespace : GUPS.EasyParallelScene.Tests.ParallelSceneManager Assembly : cs.temp.dll.dll Syntax public class SwitchTests Methods CleanUp() Clean up after each test. Declaration public void CleanUp() Init() Setup before each test. Declaration public void Init() LoadAndSwitchWithCameraAndAudio() Validate if the ParallelScene got switched too with assigning the main Camera and main AudioListener. Declaration public IEnumerator LoadAndSwitchWithCameraAndAudio() Returns Type Description IEnumerator LoadAndSwitchWithoutCameraAndAudio() Validate if the ParallelScene got switched too without assigning the main Camera and main AudioListener. Declaration public IEnumerator LoadAndSwitchWithoutCameraAndAudio() Returns Type Description IEnumerator"
  },
  "api/EasyParallelScene/GUPS.EasyParallelScene.Tests.ParallelSceneManager.TimeTests.html": {
    "href": "api/EasyParallelScene/GUPS.EasyParallelScene.Tests.ParallelSceneManager.TimeTests.html",
    "title": "Class TimeTests | GuardingPearSoftware documentation",
    "keywords": "Class TimeTests Tests for the ParallelSceneManager class. Inheritance System.Object TimeTests Namespace : GUPS.EasyParallelScene.Tests.ParallelSceneManager Assembly : cs.temp.dll.dll Syntax public class TimeTests Methods CleanUp() Clean up after each test. Declaration public void CleanUp() Init() Setup before each test. Declaration public void Init() ValidateIsPaused() Validate if the ParallelScene got switched too with assigning the main Camera and main AudioListener. Declaration public IEnumerator ValidateIsPaused() Returns Type Description IEnumerator ValidateTime() Validate if the ParallelScene got switched too without assigning the main Camera and main AudioListener. Declaration public IEnumerator ValidateTime() Returns Type Description IEnumerator"
  },
  "index.html": {
    "href": "index.html",
    "title": "H1 | GuardingPearSoftware documentation",
    "keywords": "H1 Tool H2 Tool 2"
  },
  "manual/EasyParallelScene/Background.html": {
    "href": "manual/EasyParallelScene/Background.html",
    "title": "Background | GuardingPearSoftware documentation",
    "keywords": "Background Occasionally, you need to run multiple scenes in parallel. For example, you may have a store scene or an indoor scene that runs alongside your main game scene, and you want to be able to switch between these different scenes without unloading the other scene and without having any physical interactions (like collisons, lightning, sound, ...) between those scenes. For example you might have a \"Game\" scene, next to a \"Shop\" scene: And you would like to switch between the \"Game\" scene: and the \"Shop\" scene: This example, is also included as demo, is a simple game, where the player interacts with the \"Game\" scene by moving around and try to kill cubes. He get score points and can use these to buy some upgrades for himself. This happens in the \"Shop\" scene, which is an extra scene, uneffected by the \"Game\" scene itself. Unity has no multi-scenes Unfortunately, Unity currently lacks a built-in feature for running multiple scenes in parallel as described above. While it is possible to replicate this functionality by using certain techniques and workarounds, it is important to note that there will still be some limitations and drawbacks to doing so. These limitations may include issues such as increased complexity in the codebase, potential performance bottlenecks, and difficulty in maintaining and troubleshooting the implementation. Let's have a look at the common solutions: Deactivate the gameobjects of the first scene and active the ones from the second scene. And vice versa. One option for switching between multiple scenes in Unity is to deactivate the gameobjects of the first scene and activate the ones from the second scene, and then switch back the other way when returning to the first scene. However, this method has the drawback that the gameobjects in the deactivated scene will not continue to run or update while they are inactive. This can cause issues such as maintaining the state of the gameobjects, preserving the continuity of gameplay, and ensuring that the gameobjects are ready to be used when they are reactivated. Additionally, deactivating and reactivating gameobjects can also introduce performance issues, especially if done frequently or with a large number of gameobjects. It can be a solution, but it should be used with caution and consideration of potential drawbacks and limitations. Have the gameobjects of the two scenes far away from each other in 3D space. Another option for managing multiple scenes in Unity is to have the gameobjects of the different scenes placed far away from each other in 3D space. This allows the gameobjects of each scene to exist independently of one another, without interfering with each other's functionality. However, this method does require some additional considerations, such as finding a safe location to place the gameobjects of the second scene that is far enough away from the first scene so as not to cause conflicts or issues. It's also a solution that will require more attention to the design of the game, as the player's movement between the scenes should be smooth and logical. Story of EasyParallelScene Both of the solutions I described above are not suitable for a game that I am developing that requires a free open world scene and a separate scene that allows an editor to interact with that world. The first solution of deactivating gameobjects and switching between scenes would not work well in this case, as it would interrupt the continuity of the open world gameplay, create lacks because of deactivation/activation of many gameobjects and also would not allow the editor to seamlessly interact with the game world. The second solution of having the gameobjects of the different scenes placed far away from each other in 3D space would also not be suitable, as the open world is procedural and so you have to find a place, the player never reached. So, to overcome the limitations of the previously mentioned solutions, I developed my own ways using Unity's layer techniques. By assigning different layers to the gameobjects in each of the scenes, I was able to use separate cameras to render them independently and keep their colliders and physics isolated from one another. This allowed me to have a free open world scene, as well as a separate scene for the editor to interact with the world, without any interference or conflicts between the two. This approach also allowed me to maintain the continuity of the open world gameplay and allowed the editor to make real-time changes to the game world without interrupting the player's experience. Additionally, this solution is efficient, as it avoids unnecessary rendering and physics calculation, thus improving performance. Overall, this solution proved to be a more suitable and effective approach for my game, as it addresses the specific requirements and challenges of having both open world scene and editor scene in the parallel, in the same world space and activate all the time. Using the beginning example, the two loaded parallel scenes (\"Game\" and \"Shop) will look in the Unity Editor Scene View like the following, because they share the same world space: But still be rendered independently for the player, because of the EasyParallelScene approach:"
  },
  "manual/EasyParallelScene/Description.html": {
    "href": "manual/EasyParallelScene/Description.html",
    "title": "Description | GuardingPearSoftware documentation",
    "keywords": "Description EasyParallelScene is a simple but powerful asset/tool that enables developers to seamlessly manage multiple scenes running in parallel to each other. With this tool, you can run multiple scenes in the same world space without any interactions between them. It also allows you to switch between scenes easily, bringing a selected scene in front while keeping the other scenes running in the background (in parallel) and invisible to the player. In addition to this, EasyParallelScene also allows you to pause different scenes individually, providing you with more control over the game's flow and pacing. You can also set custom time (such as delta time) for each scene, which can be used to create unique and immersive gameplay experiences. Overall, EasyParallelScene is a versatile tool that can help you take your game development to the next level by providing you with more control and flexibility over your multi-scene game or application. Key features The key features of EasyParallelScene are the following: Ability to run multiple scenes in parallel. Keep those parallel scenes within the same world space, without interacting with each other (lightning/collisions/...). Switch between parallel scenes and bring them in front while others run in the background. Ability to pause different parallel scenes individually or give them a custom time scale. Advantages The advantages of EasyParallelScene are the following: Allows for separate rendering of different scenes in the same world space, while keeping their colliders and physics isolated from each other. Maintains the continuity of the multiple scenes. Flexibility, as you can use different cameras and settings for each scene. Allows custom time scales for different scenes. Drawbacks But there are also some drawbacks of EasyParallelScene: Layer limitations due to Unity only allowing 32 layers. However, you can still run 32 scenes parallel. Only one layer can be assigned per parallel scene. Custom time feature may not work for certain components such as animator or pathfinding. Finding gameobjects and their interactions may require additional custom layer validation. However, for all of these drawbacks, EasyParallelScene provides solutions to help you overcome them and make the most out of it. Is it suitable for you EasyParallelScene is a powerful solution for those looking to create a more dynamic game or application while using multiple scenes. By allowing those multiple scenes to run in parallel and within the same world space, without interactions between them, players can experience a more immersive and interactive game world, while developers won't have to think to much about the usage of multi-scenes. However, it's important to keep in mind that this solution is best implemented at the beginning of your game development process. This is because setting up the necessary rendering, event, and collider layers are crucial for this solution to work, which can be a time-consuming task, depending on the state of development. Furthermore, it's important to note that there are limitations of the amount of parallel scenes because of the limited number of layers Unity allows. Additionally, using this solution may have certain limitations for designers, such as the restriction of using only one layer per parallel scene. Also if you already have a developed game, implementing EasyParallelScene may be challenging as it could require significant changes to the existing codebase, and it may take a lot of effort and resources to make it work seamlessly. It's important to carefully weigh the benefits and drawbacks before making a decision to add or use this solution. Code example The heart of EasyParallelScene is the ParallelSceneManager. Similar to the Unity SceneManager it allows to load and unload scenes, but additionally allows to switch between those loaded scenes. To load a Scene in parallel, you will use the following method: /// <summary> /// Load a _ParallelScene either Single or Additive (Parallel) to the current Scenes. /// Note that this function behaves the same as SceneManager.LoadSceneAsync meaning that the load does not happen immediately. /// This behavior also means that the Scene that is returned has its state set to Loading. /// </summary> /// <param name=\"_ParallelScene\">The Scene to load.</param> /// <param name=\"_LoadSceneMode\">The loading mode. Either Single or Additive (Parallel).</param> /// <param name=\"_LoadGameObjectsFlags\">Decide how to load the GameObjects in the loading Scene.</param> /// <returns>Returns the loading Scene async operation.</returns> /// <exception cref=\"ArgumentNullException\"></exception> /// <exception cref=\"Exception\"></exception> public AsyncOperation Load(ParallelScene _ParallelScene, LoadSceneMode _LoadSceneMode, ELoadGameObjectFlag _LoadGameObjectsFlags) It allows to load a Scene in parallel. You notice that you do not pass directly a Scene, instead you pass a ParallelScene object. A ParallelScene wraps around a Unity Scene and makes it parallelizable. This allows unique rendering, collision, lightning and time. /// <summary> /// A ParallelScene wraps around a Unity Scene and makes it parallelizable. /// This allows unique rendering, collision and light. /// To create a ParallelScene, just right click anywhere in your project view and click Create->GUPS->EasyParallelScene->ParallelScene. /// Assign to this ParallelScene a Scene and apply your custom settings. /// </summary> [CreateAssetMenu(fileName = \"NewParallelScene\", menuName = \"GUPS/EasyParallelScene/ParallelScene\", order = Int32.MaxValue)] public class ParallelScene : ScriptableObject The ParallelScene itself is serializeable. You can create it inside the Unity Editor project view. Here you assign a Scene that should be parallelizable, the rendering/collision layer and a custom time scale if needed. To make this ParallelScene available it need to be registered to the ParallelSceneManager. You can either do this via the Unity Editor Inspector or via code using this method: /// <summary> /// Register a ParallelScene while runtime, to make it available in GameMode. /// </summary> /// <param name=\"_ParallelScene\">Pass a ParallelScene you want to register and make it available in game.</param> public void RegisterParallelScene(ParallelScene _ParallelScene) Now you can load this ParallelScene and interact with it. To receive for example the registered layer for a ParallelScene you can use the ParallelSceneManager and call: /// <summary> /// Returns the layer of the _ParallelScene. /// </summary> /// <param name=\"_ParallelScene\">Get the layer for the passed ParallelScene.</param> /// <returns></returns> public int GetLayer(ParallelScene _ParallelScene) Sure there are also some helper functions for developers. For example to check if two GameObjects are in the same ParallelScene, you use the GameObjectHelper and call (sure there are many more): /// <summary> /// Returns true, if both GameObjects are in the same Scene. /// </summary> /// <param name=\"_GameObject1\"></param> /// <param name=\"_GameObject2\"></param> /// <returns></returns> public static bool GameObjectsAreInSameScene(GameObject _GameObject1, GameObject _GameObject2) Finally, to switch between the ParallelScenes, you need to use the ParallelSceneManager. Here you can switch between the Scenes and also decide how to switch between them. /// <summary> /// Switch to a loaded ParallelScene and set it as active Scene. If the scene is not loaded yet, returns false. /// </summary> /// <param name=\"_ParallelScene\">Pass a ParallelScene to switch to.</param> /// <param name=\"_SwitchSceneFlag\">Manage the Scene switching.</param> /// <param name=\"_PauseCurrentScene\">Pause the active scene.</param> /// <returns>Returns if the switching was successful.</returns> public bool SwitchTo(ParallelScene _ParallelScene, ESwitchSceneFlag _SwitchSceneFlag, bool _PauseCurrentScene) That's mostly the code you will need to setup and use EasyParallelScene."
  },
  "manual/EasyParallelScene/Setup.html": {
    "href": "manual/EasyParallelScene/Setup.html",
    "title": "How to start | GuardingPearSoftware documentation",
    "keywords": "How to start EasyParallelScene is a simple but powerful asset/tool that enables developers to seamlessly manage multiple scenes running in parallel to each other. With this tool, you can run multiple scenes in the same world space without any interactions between them. It also allows you to switch between scenes easily, bringing a selected scene in front while keeping the other scenes running in the background (in parallel) and invisible to the player. How to setup this in your own game or application, will be explained in the following. How does EasyParallelScene work In short, EasyParallelScene uses the layer ability of Unity. By assigning a unique layer per scene to its gameobjects, it is possible to use separate cameras to render the gameobjects independently and keep their colliders and physics isolated from one another. This allows to have multiple scenes without any interference or conflicts between those. While allowing to maintain the continuity of the gameplay of each scene without interrupting the player's experience. Additionally, it is efficient, as it avoids unnecessary rendering and physics calculation, thus improving performance. Layer and Tags To understand how EasyParallelScene works, lets shortly have a look at the Layer and Tags itself. Layer In general in Unity, Layers are a way to separate different gameobjects into groups. Each gameobject in Unity can be assigned to a specific layer, which allows for finer control over their interactions, rendering, and visibility. The built-in layer system includes predefined layers like \"Default\", \"TransparentFX\", \"Ignore Raycast\", etc., but you can also create custom layers to fit your specific needs. Layers can be used in conjunction with cameras, physics, and scripting to achieve desired effects in your scene. Layer settings can be accessed via main menu: Edit > Project Settings, selecting the Tags and Layers category. (See more https://docs.unity3d.com/Manual/class-TagManager.html#Layers ) Tag In Unity, tags are string labels that can be assigned to gameobjects. These labels allow you to identify and categorize gameobjects in your scene, and can be used to filter objects for various purposes such as scripting, physics, and rendering. Tags can be created and assigned to game objects in the Unity Editor, and they can be used to distinguish between different types of objects, such as enemies, collectibles, and obstacles, in your scene. This can be helpful for writing code that needs to interact with specific groups of objects, such as applying damage to all enemies or finding all collectible objects in a scene. Tag settings can be accessed via main menu: Edit > Project Settings, selecting the Tags and Layers category. (See more https://docs.unity3d.com/Manual/class-TagManager.html#Tags ) Layer in EasyParallelScene EasyParallelScene is based on Unity's built in layer system. Each parallel scene, and so its gameobjects, receives a unique layer. This allows to separate in front and back scenes, by rendering only the scene and gameobjects to the Player with the specific layer you want to have in front. In the meantime the layers of the back scenes continue to react independently on their own. To ensure this system operates smoothly, it is necessary to properly set up the cameras, collision layers, and lighting. Once assigned, you can switch between those scenes, by bringing a different layer in front (render it). Tag in EasyParallelScene As the layers are no longer available for custom distinction between gameobjects, it is recommended to use tags instead. For instance, you could apply a \"Player\" tag to the player gameobject, or an \"Enemy\" tag to the enemy gameobject. This will allow you to effectively differentiate and categorize your gameobjects, even if they share the same layer. Camera In Unity, the camera is an essential part of any project, as it determines what the player or user sees in the game or application. This seeing or rendering is achieved through the use of a camera component, which is attached to a gameobject in the scene. Which gameobjects will be rendered, can be defined by modifiy the camera components culling mask. To use the camera culling mask, you can set the \"Culling Mask\" property of the camera component in the Inspector window. The culling mask is a bitmask that determines which layers the camera should render. By checking one or multiple layers, the gameobjects included in this checked layer mask, will be visible to the player. (See more https://docs.unity3d.com/ScriptReference/Camera.html ) Camera in EasyParallelScene The EasyParallelScene utilizes the layer system in Unity by assigning each scene its own distinct layer and corresponding camera. This allows for the control of scene visibility for the player. To achieve this, it is necessary to have at least one camera per scene, with the culling mask matching the scene layer, and to assign all gameobjects within that scene to this same scene layer. For best results, it is recommended to create a custom layer for each scene, ensuring proper organization and control over scene visibility. The camera in Unity serves not only as a renderer, but also as component for capturing mouse clicks or touch inputs. This means, only objects visible by the camera and whose layer mask overlaps with the camera's event mask will be able to receive OnMouseXXX events. To properly function in EasyParallelScene, it is necessary to not only set the culling mask, but also the event mask to the specific layer of the scene. This ensures that the proper scene in front, will respond to player inputs and interactions. For your comfort, this all automatically happens in the background, while switching scenes. But, if you would like to use the EasyParallelScene approach in you very first scene. You have to do this setup manually. For the demo scene \"Game\" this would look like the following. First you need to assign the layer to the \"ParallelScene\": Next you setup the Camera rendering, by assigning the same layer to the \"CullingMask\": Also you have to assign the \"ParallelScene\" layer to the existing gameobjects in this scene: And that's it. Collision Next to the camera, the collision setup is important. Because you do not want different scenes with different layers, in the same world space, to interact with each other without being visible for the player. In general, the Unity collision layers play a crucial role in defining how objects in a scene interact with each other. They determine whether objects should collide or pass through each other, and are responsible for the behavior of Physics2D and Physics3D components in the scene. (See more https://docs.unity3d.com/ScriptReference/Collider.html ) Collision in EasyParallelScene The setup for the EasyParallelScene is simple and straightforward. To ensure that the different scenes in the world space do not interact with each other, you just need to configure the layers to only collide with themselves. This way, each scene will only respond to collisions within its own layer, allowing for proper separation and control. Lightning In Unity, there are several lighting components that you can use to create a more realistic and immersive environment for your game or application. Some of the main lighting components in Unity include: Light sources: There are several types of light sources in Unity, including directional lights, point lights, spot lights, and area lights. Each type of light source has its own unique properties, such as direction, range, and intensity. Reflections: Reflections in Unity can be created using reflective shaders, reflection probes, and planar reflections. Reflections can add a level of detail and realism to objects and surfaces in the scene, especially those with reflective materials like metal or water. (See more https://docs.unity3d.com/ScriptReference/Light.html and https://docs.unity3d.com/Manual/class-ReflectionProbe.html ) Lightning in EasyParallelScene Aside from the camera and collision setup, the proper configuration of lighting is also important. To ensure that the scenes in the background do not affect the lighting in the front scene that is currently visible to the player, you want to avoid strange lights, shadows, or reflections from messing into the player's view. Setting up the lighting in your scene is much like configuring the cameras. To make sure that lighting is only rendered when it is required, you will need to adjust the culling mask. You need to do so for the lights: And for the reflections: How to setup EasyParallelScene with example After understanding the basics, we will setup an example, which is also included in this asset/tool as demo. You can find it at: \"Assets\\GUPS\\EasyParallelScene\\Demos\\Voxel Shooter\" Setup the Layers The first thing to do is, find or create individual layers for each scene. In this example, I will just use the \"Water\" and \"UI\" layers because they are fixed and available in all projects, to make the demo work: Setup the ParallelScenes Next you need to create a ParallelScene for each of your game scenes. To do so, press right click anywhere in your project (I do it in Assets\\GUPS\\EasyParallelScene\\Demos\\Voxel Shooter, because there are the demo scenes located) and Create->GUPS->EasyParallelScene->ParallelScene. Give it a nice name (here \"GameParallelScene\"): Open the file in the inspector and assign your layer from the first step. Do this for all your others scenes: You can also define a custom TimeScale for the scene, independent from the Unity Time.TimeScale allowing you a custom DeltaTime. But the drawback is, this DeltaTime only works for scripts and not in Unity default components. This means, physics or nav mesh agents will still use the Unity Time.TimeScale based DeltaTime: Once finished, next you have to setup the layer of the gameobjects in the scenes itself (But only if it is your first scene. EasyParallelScene will take of this work for you, if you switch to a scene using the ParallelSceneManager). Open your scene, select the scene gameobjects and assign the layer: Note: Instantiating or moving gameobjects directly into a ParallelScene is also possible using the ParallelSceneManager. This gameobject and all its children will then automatically receive the correct layer settings. /// <summary> /// Clones the GameObject _Original and returns the clone. /// When you clone a GameObject or Component, all child objects and components are also cloned with their properties set like those of the original object. /// This cloned GameObject will then be moved to the _ParallelScene. /// </summary> /// <param name=\"_Original\">GameObject to clone.</param> /// <param name=\"_Position\">Position for the cloned GameObject.</param> /// <param name=\"_Rotation\">Rotation for the cloned GameObject.</param> /// <param name=\"_ParallelScene\">Move cloned object to.</param> /// <returns></returns> public GameObject Instantiate(GameObject _Original, Vector3 _Position, Quaternion _Rotation, ParallelScene _ParallelScene) The next important step is, to setup your scene camera, to render only the scene layer. To do so, open your camera and assign the culling mask (Like with the gameobjects, this is only required for your first scene, if not loaded via the ParallelSceneManager): Setup the ParallelSceneManager Once you are done, creating the ParallelScenes you need to create the ParallelSceneManager gameobject. The ParallelSceneManager controls the whole loading, switching and unloading of scenes. Create a new gameobject in your start scene, assign the ParallelSceneManager script and assign in the list below all ParallelScenes, to make them available in game. Load ParallelScenes Now when starting your game you will only see your starting scene. To load a ParallelScene next to it in the back, you have to use the ParallelSceneManager. Call the method \"Load\" and wait until the scene is done loading. /// <summary> /// Load a _ParallelScene either Single or Additive (Parallel) to the current Scenes. /// Note that this function behaves the same as SceneManager.LoadSceneAsync meaning that the load does not happen immediately. /// This behavior also means that the Scene that is returned has its state set to Loading. /// </summary> /// <param name=\"_ParallelScene\">The Scene to load.</param> /// <param name=\"_LoadSceneMode\">The loading mode. Either Single or Additive (Parallel).</param> /// <param name=\"_LoadGameObjectsFlags\">Decide how to load the GameObjects in the loading Scene.</param> /// <returns>Returns the loading Scene async operation.</returns> /// <exception cref=\"ArgumentNullException\"></exception> /// <exception cref=\"Exception\"></exception> public AsyncOperation Load(ParallelScene _ParallelScene, LoadSceneMode _LoadSceneMode, ELoadGameObjectFlag _LoadGameObjectsFlags) Switch ParallelScenes To finally switch between the newly loaded and the current scene, you can use the ParallelSceneManager and call the \"SwitchTo\" method. /// <summary> /// Switch to a loaded ParallelScene and set it as active Scene. If the scene is not loaded yet, returns false. /// </summary> /// <param name=\"_ParallelScene\">Pass a ParallelScene to switch to.</param> /// <param name=\"_SwitchSceneFlag\">Manage the Scene switching.</param> /// <param name=\"_PauseCurrentScene\">Pause the active scene.</param> /// <returns>Returns if the switching was successful.</returns> public bool SwitchTo(ParallelScene _ParallelScene, ESwitchSceneFlag _SwitchSceneFlag, bool _PauseCurrentScene) That's mostly all you need to know to start. Sure there are many helper methods or extensions to make the usage of EasyParallelScene very easy to use. To learn more, just look around in the attached demo and its code. If you like the solution, give it a try. Suggestions for improvement are sure always welcome."
  }
}